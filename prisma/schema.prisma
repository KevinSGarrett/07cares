generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkId     String   @unique
  email       String   @unique
  displayName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  campaigns   Campaign[]
  donations   Donation[]
  rewardClaims RewardClaim[]
  teamMemberships TeamMember[]
  createdReferralLinks ReferralLink[] @relation("UserCreatedReferralLinks")
}

model Campaign {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  city        String
  state       String
  goalCents   Int
  coverUrl    String
  status      String   // draft|live|ended|not_funded|suspended
  isAon       Boolean  @default(false)
  startDate   DateTime
  endDate     DateTime
  organizerId String
  organizer   User     @relation(fields: [organizerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  donations   Donation[]
  rewardTiers RewardTier[]
  teams       Team[]
  referralLinks ReferralLink[]
  payouts     Payout[]
  ledgerEntries Ledger[]
  media       CampaignMedia[]
  updates     CampaignUpdate[]
}

model Donation {
  id          String   @id @default(cuid())
  campaignId  String
  donorId     String
  amountCents Int
  tipCents    Int       @default(0)
  isAnonymous Boolean   @default(false)
  hideName    Boolean   @default(true)
  intentId    String?
  createdAt   DateTime  @default(now())
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  donor       User      @relation(fields: [donorId], references: [id])
  rewardClaims RewardClaim[]
  ledgerEntries Ledger[]
}

/// Reward tiers configured by a campaign. Backers can optionally claim a tier.
model RewardTier {
  id           String   @id @default(cuid())
  campaignId   String
  title        String
  description  String?
  amountCents  Int
  limitQuantity Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  campaign     Campaign @relation(fields: [campaignId], references: [id])
  claims       RewardClaim[]
}

/// A claim of a reward tier, generally tied to a donation and donor.
model RewardClaim {
  id           String   @id @default(cuid())
  rewardTierId String
  donationId   String?
  donorId      String
  createdAt    DateTime @default(now())

  rewardTier   RewardTier @relation(fields: [rewardTierId], references: [id])
  donation     Donation?  @relation(fields: [donationId], references: [id])
  donor        User       @relation(fields: [donorId], references: [id])
}

/// Teams let organizers run team-based fundraising.
model Team {
  id         String    @id @default(cuid())
  campaignId String
  name       String
  slug       String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  campaign   Campaign  @relation(fields: [campaignId], references: [id])
  members    TeamMember[]
  referralLinks ReferralLink[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   @default("member") // member|captain
  joinedAt  DateTime @default(now())

  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}

/// Referral links for attribution to users or teams.
model ReferralLink {
  id              String   @id @default(cuid())
  campaignId      String
  code            String   @unique
  createdByUserId String?
  teamId          String?
  clicks          Int      @default(0)
  createdAt       DateTime @default(now())

  campaign        Campaign @relation(fields: [campaignId], references: [id])
  createdByUser   User?    @relation("UserCreatedReferralLinks", fields: [createdByUserId], references: [id])
  team            Team?    @relation(fields: [teamId], references: [id])
}

enum PayoutStatus {
  pending
  paid
  failed
}

model Payout {
  id              String       @id @default(cuid())
  campaignId      String
  amountCents     Int
  stripeTransferId String?
  status          PayoutStatus @default(pending)
  createdAt       DateTime     @default(now())

  campaign        Campaign     @relation(fields: [campaignId], references: [id])
  ledgerEntries   Ledger[]
}

enum LedgerType {
  donation
  fee
  payout
  refund
  adjustment
}

/// Ledger of money movements (signed cents). Use positive for inflows, negative for outflows.
model Ledger {
  id             String     @id @default(cuid())
  campaignId     String
  type           LedgerType
  amountCents    Int
  donationId     String?
  payoutId       String?
  createdAt      DateTime   @default(now())

  campaign       Campaign   @relation(fields: [campaignId], references: [id])
  donation       Donation?  @relation(fields: [donationId], references: [id])
  payout         Payout?    @relation(fields: [payoutId], references: [id])
}

enum CampaignMediaType {
  image
  video
}

model CampaignMedia {
  id         String            @id @default(cuid())
  campaignId String
  type       CampaignMediaType
  url        String
  position   Int               @default(0)
  createdAt  DateTime          @default(now())

  campaign   Campaign          @relation(fields: [campaignId], references: [id])
}

model CampaignUpdate {
  id         String   @id @default(cuid())
  campaignId String
  title      String
  content    String
  publishedAt DateTime?
  createdAt  DateTime @default(now())

  campaign   Campaign @relation(fields: [campaignId], references: [id])
}
